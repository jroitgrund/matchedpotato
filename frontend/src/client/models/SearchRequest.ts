/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Gender } from './Gender';
import {
    GenderFromJSON,
    GenderFromJSONTyped,
    GenderToJSON,
} from './Gender';
import type { Size } from './Size';
import {
    SizeFromJSON,
    SizeFromJSONTyped,
    SizeToJSON,
} from './Size';

/**
 * 
 * @export
 * @interface SearchRequest
 */
export interface SearchRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchRequest
     */
    color: string;
    /**
     * 
     * @type {Set<Gender>}
     * @memberof SearchRequest
     */
    gender?: Set<Gender>;
    /**
     * 
     * @type {Set<Size>}
     * @memberof SearchRequest
     */
    size?: Set<Size>;
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    priceMin?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    priceMax?: number;
}

/**
 * Check if a given object implements the SearchRequest interface.
 */
export function instanceOfSearchRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "color" in value;

    return isInstance;
}

export function SearchRequestFromJSON(json: any): SearchRequest {
    return SearchRequestFromJSONTyped(json, false);
}

export function SearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'color': json['color'],
        'gender': !exists(json, 'gender') ? undefined : (new Set((json['gender'] as Array<any>).map(GenderFromJSON))),
        'size': !exists(json, 'size') ? undefined : (new Set((json['size'] as Array<any>).map(SizeFromJSON))),
        'priceMin': !exists(json, 'priceMin') ? undefined : json['priceMin'],
        'priceMax': !exists(json, 'priceMax') ? undefined : json['priceMax'],
    };
}

export function SearchRequestToJSON(value?: SearchRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'color': value.color,
        'gender': value.gender === undefined ? undefined : (Array.from(value.gender as Set<any>).map(GenderToJSON)),
        'size': value.size === undefined ? undefined : (Array.from(value.size as Set<any>).map(SizeToJSON)),
        'priceMin': value.priceMin,
        'priceMax': value.priceMax,
    };
}

