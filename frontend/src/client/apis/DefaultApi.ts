/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ItemsResult,
  RequestIdResult,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ItemsResultFromJSON,
    ItemsResultToJSON,
    RequestIdResultFromJSON,
    RequestIdResultToJSON,
} from '../models';

export interface GetResultsApiGetResultsRequestIdGetRequest {
    requestId: string;
}

export interface SearchApiSearchColorGetRequest {
    color: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get Results
     */
    async getResultsApiGetResultsRequestIdGetRaw(requestParameters: GetResultsApiGetResultsRequestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsResult>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getResultsApiGetResultsRequestIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/get-results/{request_id}`.replace(`{${"request_id"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsResultFromJSON(jsonValue));
    }

    /**
     * Get Results
     */
    async getResultsApiGetResultsRequestIdGet(requestParameters: GetResultsApiGetResultsRequestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsResult> {
        const response = await this.getResultsApiGetResultsRequestIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search
     */
    async searchApiSearchColorGetRaw(requestParameters: SearchApiSearchColorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestIdResult>> {
        if (requestParameters.color === null || requestParameters.color === undefined) {
            throw new runtime.RequiredError('color','Required parameter requestParameters.color was null or undefined when calling searchApiSearchColorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/search/{color}`.replace(`{${"color"}}`, encodeURIComponent(String(requestParameters.color))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestIdResultFromJSON(jsonValue));
    }

    /**
     * Search
     */
    async searchApiSearchColorGet(requestParameters: SearchApiSearchColorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestIdResult> {
        const response = await this.searchApiSearchColorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
